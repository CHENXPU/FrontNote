(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{479:function(t,a,r){"use strict";r.r(a);var s=r(55),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"异步方法小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步方法小结"}},[t._v("#")]),t._v(" 异步方法小结")]),t._v(" "),r("h2",{attrs:{id:"实现思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现思路"}},[t._v("#")]),t._v(" 实现思路")]),t._v(" "),r("ul",[r("li",[t._v("回调函数")]),t._v(" "),r("li",[t._v("事件监听: 采用事件驱动模式, 任务的执行不取决于代码的顺序, 而取决于某个事件是否发生.")]),t._v(" "),r("li",[t._v("观察者模式")]),t._v(" "),r("li",[t._v("promise对象: 每一个异步任务返回一个promise对象, 该对象有一个then方法, 允许指定回调函数,")])]),t._v(" "),r("h2",{attrs:{id:"实现方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现方法"}},[t._v("#")]),t._v(" 实现方法")]),t._v(" "),r("h3",{attrs:{id:"promise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),r("h3",{attrs:{id:"generator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),r("h3",{attrs:{id:"async"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[t._v("#")]),t._v(" async")])])}),[],!1,null,null,null);a.default=e.exports}}]);